generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  seller
  admin
}

enum UserStatus {
  verified
  unverified
  suspended
  deleted
}

enum ProductStatus {
  active
  inactive
  suspended
  deleted
}

enum OrderStatus {
  pending
  paid
  refunded
  cancelled
}

enum ImageType {
  thumbnail
  image
}

model User {
  id        String      @id @default(cuid())
  name      String
  lastName  String
  email     String      @unique
  password  String
  role      UserRole   @default(user)
  status    UserStatus @default(unverified)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  products  Product[]
  orders   Order[]
  cartItem    Cart[]
  images    Image[]

  productDraft ProductDraft?
}

model Product {
  id          String        @id @default(cuid())
  name        String
  description String?
  discount    Int           @default(0)
  price       Float
  rating      Float         @default(0)
  stock       Int
  category    String
  status      ProductStatus @default(active)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  userId      String
  user        User          @relation(fields: [userId], references: [id])
  cartItem    Cart[]
  orderItems  OrderItem[]
  images Image[]

  @@index([userId])
}

model ProductDraft {
  id          String        @id @default(cuid())
  name        String?
  description String?
  discount    Int?
  price       Float?
  stock       Int?
  category    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  userId      String   @unique
  user        User          @relation(fields: [userId], references: [id])
  images      Image[]

  @@index([userId])
}

model Image {
  id        String   @id @default(cuid())
  url       String
  publicId  String    @unique
  userId    String
  type      ImageType @default(image)
  createdAt DateTime @default(now())

  productId String?
  product   Product? @relation(fields: [productId], references: [id])

  draftId   String?
  draft     ProductDraft? @relation(fields: [draftId], references: [id])

  user      User      @relation(fields: [userId], references: [id])

  @@index([productId])
  @@index([draftId])
}

model Cart {
  id        String    @id @default(cuid())
  userId    String
  productId String
  quantity  Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}


model Order {
  id          String   @id @default(cuid())
  userId      String
  total       Float
  paymentIntentId String?
  status      OrderStatus @default(pending)   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  price     Float
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}